#!/usr/bin/env node

/**
 * NOTE: Some of the structure of the db connection and how to configure it
 *  was inspired by following along the blog post at the following url:
 *  https://www.terlici.com/2015/08/13/mysql-node-express.html
 */

/**
 * Module dependencies.
 */

const db = require('./dbcon');
const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
 * Connect to the database
 */

/*
 *  *****   IMPORTANT   *****
 *  db.DEVELOPMENT is for using a local mySQL database.
 *  db.PRODUCTION is for using the OSU mySQL database.
 *
 *  If you're using the cs340 db, then change:
 *    db.DEVELOPMENT  to  db.PRODUCTION
 */

db.connect(db.production, (err) => {
  if (err) {
    console.log('Unable to connect to the database.');
    process.exit();
  } else {

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
